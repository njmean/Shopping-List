npm init   - Take defaults / appropriate license and description   start point is server.js
npm install express body-parser mongoose concurrently
npm install -D nodemon
npm install dotenv    (So can use .env file in dev and env variables on host )

Add .env to git ignore

Add start script to package.json as "start" : "node server.js"
and "server": "nodemon server.js"
Create server.js 

// Client  in client diractory
if not already installed then ::  npm install -G create-react-app
npm create-react-app .
add "proxy" to client package.json

add "client" : "npm start --prefix client"  to server package.json scripts
add "dev": "concurrently \"npm run server\" \"npm run client\""  to server package.json script
add "client-install": "npm install --prefix client" to server package.json script


Will need to tidy react remove index.css and logo.svg and references
also clear out app.css

in client folder npm install bootstrap reactstrap uuid react-transition-group
in client npm install redux react-redux redux-thunk
in client npm install axios

In server install heroku-cli   then heroku login  / heroku create  / heroku git:remote -a  {name from Heroku }   [if nec create git first]

To create Git and add to heroku

git add .
git commit -am "Make it Better"
git push heroku master

if already have git set up

heroku git:remote -a  {name from Heroku} 
git push heroku master

Use dotenv for environment variables and equivalent on hosts like heroku, see above.   Need to allow IP access from everywhere when running on mongoDB atlas (to limited ones when testing) 
or use Config (npm install config - similar idea)

For JWT (could remove bodyParser and just use express as now build in)

npm install bcryptjs
npm install jsonwebtoken

